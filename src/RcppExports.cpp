// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// orb
std::vector< std::vector< std::vector<double> > > orb(Rcpp::NumericMatrix& x, const int& npartitions, const double& dcell);
RcppExport SEXP _orbr_orb(SEXP xSEXP, SEXP npartitionsSEXP, SEXP dcellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type npartitions(npartitionsSEXP);
    Rcpp::traits::input_parameter< const double& >::type dcell(dcellSEXP);
    rcpp_result_gen = Rcpp::wrap(orb(x, npartitions, dcell));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_orbr_orb", (DL_FUNC) &_orbr_orb, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_orbr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
